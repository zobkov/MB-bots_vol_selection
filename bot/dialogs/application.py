from aiogram import types
from aiogram.types import CallbackQuery, ContentType
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Button, Start, Group, Select, Back, Next, SwitchTo, Cancel
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.input import TextInput, MessageInput

from bot.states import DepartmentSelectionSG, ApplicationSG, MenuSG
from database.repositories import UserRepository, ApplicationRepository
from database.db import Database
import re


# –í–∞–ª–∏–¥–∞—Ü–∏—è email
async def email_check(message: types.Message, widget, dialog_manager: DialogManager, text: str):
    if not text.endswith("@spbu.ru"):
        await message.answer("‚ùå Email –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ @spbu.ru")
        return False
    return True


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û
async def on_full_name_input(message: types.Message, widget, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["full_name"] = text
    await dialog_manager.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email
async def on_email_input(message: types.Message, widget, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["email"] = text
    await dialog_manager.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ª–∏—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤
async def on_qualities_input(message: types.Message, widget, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["personal_qualities"] = text
    await dialog_manager.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
async def on_motivation_input(message: types.Message, widget, dialog_manager: DialogManager, text: str):
    dialog_manager.dialog_data["motivation"] = text
    await dialog_manager.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def on_contact_received(message: types.Message, widget, dialog_manager: DialogManager):
    if message.contact:
        dialog_manager.dialog_data["phone"] = message.contact.phone_number
        await dialog_manager.next()
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
async def on_course_selected(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    course_data = {
        "1_bachelor": "1 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "2_bachelor": "2 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç", 
        "3_bachelor": "3 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "4_bachelor": "4 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç",
        "1_master": "1 –∫—É—Ä—Å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞",
        "2_master": "2 –∫—É—Ä—Å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    }
    
    course_key = callback.data.split(":")[1]
    dialog_manager.dialog_data["course"] = course_key
    dialog_manager.dialog_data["course_display"] = course_data[course_key]
    await dialog_manager.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—â–µ–∂–∏—Ç–∏—è
async def on_dormitory_selected(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    dormitory = callback.data.split(":")[1] == "yes"
    dialog_manager.dialog_data["dormitory"] = dormitory
    await dialog_manager.next()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
async def on_submit_application(callback: CallbackQuery, button: Button, dialog_manager: DialogManager):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = dialog_manager.dialog_data
    user = dialog_manager.event.from_user
    db: Database = dialog_manager.middleware_data.get("db")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with db.get_session() as session:
        user_repo = UserRepository(session)
        app_repo = ApplicationRepository(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user = await user_repo.get_or_create_user(
            telegram_id=user.id,
            telegram_username=user.username
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        application_data = {
            "full_name": data["full_name"],
            "course": data["course"],
            "dormitory": data["dormitory"],
            "email": data["email"],
            "phone": data["phone"],
            "personal_qualities": data["personal_qualities"],
            "motivation": data["motivation"],
            "logistics_rating": data["logistics_rating"],
            "marketing_rating": data["marketing_rating"],
            "pr_rating": data["pr_rating"],
            "program_rating": data["program_rating"],
            "partners_rating": data["partners_rating"],
        }
        
        await app_repo.create_application(db_user.id, application_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await user_repo.update_stage1_status(user.id, "submitted")
    
    await callback.message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞–ª(–∞) –æ —Å–µ–±–µ! "
        "–ë—É–¥–µ–º —Å—á–∞—Å—Ç–ª–∏–≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤–∂–∏–≤—É—é! "
        "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã –ú–ë'25 ü§ç"
    )
    await dialog_manager.start(MenuSG.main)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–æ–≤
async def on_departments_result(start_data, result, dialog_manager: DialogManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–æ–≤"""
    if result:
        # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–∞—Ö –æ—Ç–¥–µ–ª–æ–≤
        for key, value in result.items():
            dialog_manager.dialog_data[key] = value
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É - –º–æ—Ç–∏–≤–∞—Ü–∏–∏
    await dialog_manager.switch_to(ApplicationSG.motivation)


# –ì–µ—Ç—Ç–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
async def get_overview_data(dialog_manager: DialogManager, **kwargs):
    data = dialog_manager.dialog_data
    
    dormitory_text = "–î–∞" if data.get("dormitory") else "–ù–µ—Ç"
    
    overview_text = f"""üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

üë§ –§–ò–û: {data.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üéì –ö—É—Ä—Å: {data.get('course_display', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè† –û–±—â–µ–∂–∏—Ç–∏–µ: {dormitory_text}
üìß Email: {data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}

üå∏ –õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:
{data.get('personal_qualities', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üåü –ú–æ—Ç–∏–≤–∞—Ü–∏—è:
{data.get('motivation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìä –û—Ü–µ–Ω–∫–∏ –æ—Ç–¥–µ–ª–æ–≤:
‚Ä¢ –õ–æ–≥–∏—Å—Ç–∏–∫–∞: {data.get('logistics_rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥: {data.get('marketing_rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ PR: {data.get('pr_rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞: {data.get('program_rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä—ã: {data.get('partners_rating', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"""

    return {"overview_text": overview_text}


application_dialog = Dialog(
    # –û–∫–Ω–æ 1: –§–ò–û
    Window(
        Const("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:"),
        TextInput(
            id="full_name_input",
            on_success=on_full_name_input,
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.full_name,
    ),
    
    # –û–∫–Ω–æ 2: –ö—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è
    Window(
        Const("üéì –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è:"),
        Group(
            Button(Const("1 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"), id="1_bachelor", on_click=on_course_selected),
            Button(Const("2 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"), id="2_bachelor", on_click=on_course_selected),
            Button(Const("3 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"), id="3_bachelor", on_click=on_course_selected),
            Button(Const("4 –∫—É—Ä—Å –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç"), id="4_bachelor", on_click=on_course_selected),
            Button(Const("1 –∫—É—Ä—Å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"), id="1_master", on_click=on_course_selected),
            Button(Const("2 –∫—É—Ä—Å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"), id="2_master", on_click=on_course_selected),
            width=2,
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.course,
    ),
    
    # –û–∫–Ω–æ 3: –û–±—â–µ–∂–∏—Ç–∏–µ
    Window(
        Const("üè† –ñ–∏–≤–µ—à—å –ª–∏ —Ç—ã –≤ –æ–±—â–µ–∂–∏—Ç–∏–∏ –≤ –ú–∏—Ö–∞–π–ª–æ–≤—Å–∫–æ–π –¥–∞—á–µ?"),
        Group(
            Button(Const("–î–∞"), id="yes", on_click=on_dormitory_selected),
            Button(Const("–ù–µ—Ç"), id="no", on_click=on_dormitory_selected),
            width=2,
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.dormitory,
    ),
    
    # –û–∫–Ω–æ 4: Email
    Window(
        Const("üìß –£–∫–∞–∂–∏ —Å–≤–æ—é –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–æ—á—Ç—É (–¥–æ–ª–∂–Ω–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ @spbu.ru):"),
        TextInput(
            id="email_input",
            on_success=on_email_input,
            type_factory=email_check,
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.email,
    ),
    
    # –û–∫–Ω–æ 5: –¢–µ–ª–µ—Ñ–æ–Ω
    Window(
        Const("üì± –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"),
        MessageInput(
            func=on_contact_received,
            content_types=[ContentType.CONTACT],
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.phone,
    ),
    
    # –û–∫–Ω–æ 6: –õ–∏—á–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞
    Window(
        Const("üå∏ –†–∞—Å—Å–∫–∞–∂–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ –æ —Å–≤–æ–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö –∏ —É–º–µ–Ω–∏—è—Ö, "
              "–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥–∏–ª–∏—Å—å –±—ã –≤ –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ:"),
        TextInput(
            id="qualities_input",
            on_success=on_qualities_input,
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.personal_qualities,
    ),
    
    # –û–∫–Ω–æ 7: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–æ–≤
    Window(
        Const("üìä –¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å–≤–æ–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –∫–∞–∂–¥–æ–º—É –æ—Ç–¥–µ–ª—É –æ—Ç 1 –¥–æ 5, "
              "–≥–¥–µ 1 - –Ω–∞–∏–º–µ–Ω–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, 5 - –æ—á–µ–Ω—å —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ—Ç –æ—Ç–¥–µ–ª."),
        Start(
            Const("üìã –û—Ü–µ–Ω–∏—Ç—å –æ—Ç–¥–µ–ª—ã"),
            id="departments",
            state=DepartmentSelectionSG.logistics
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.departments,
    ),
    
    # –û–∫–Ω–æ 8: –ú–æ—Ç–∏–≤–∞—Ü–∏—è
    Window(
        Const("üåü –û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, –ø–æ—á–µ–º—É —Ç–µ–±–µ –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–µ–±—è –≤ —Ä–æ–ª–∏ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –ú–ë:"),
        TextInput(
            id="motivation_input",
            on_success=on_motivation_input,
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.motivation,
    ),
    
    # –û–∫–Ω–æ 9: –û–±–∑–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
    Window(
        Format("{overview_text}"),
        Group(
            Button(Const("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å"), id="submit", on_click=on_submit_application),
            Button(Const("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"), id="edit", on_click=lambda c, b, m: m.switch_to(ApplicationSG.full_name)),
            width=1,
        ),
        Cancel(Const("‚ùå –û—Ç–º–µ–Ω–∞")),
        state=ApplicationSG.overview,
        getter=get_overview_data,
    ),
    
    on_process_result=on_departments_result,
)
