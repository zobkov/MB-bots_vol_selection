from aiogram import types
from aiogram_dialog import Dialog, DialogManager, Window
from aiogram_dialog.widgets.kbd import Button, Start, SwitchTo
from aiogram_dialog.widgets.text import Const, Format
from config.config import Config
from database.repositories import UserRepository
from database.db import Database

from bot.states import MenuSG, ApplicationSG


async def get_menu_data(dialog_manager: DialogManager, **kwargs):
    """–ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config: Config = dialog_manager.middleware_data.get("config")
    db: Database = dialog_manager.middleware_data.get("db")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = dialog_manager.event.from_user
    
    session = await db.get_session()
    try:
        user_repo = UserRepository(session)
        db_user = await user_repo.get_user_by_telegram_id(user.id)
        
        if db_user:
            status_text = "–ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞" if db_user.stage1_submitted == "submitted" else "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞"
            deadline_text = "" if db_user.stage1_submitted == "submitted" else f"\n(–¥–µ–¥–ª–∞–π–Ω: {config.selection.stages['stage1']['deadline']})"
        else:
            status_text = "–ó–∞—è–≤–∫–∞ –Ω–µ –ø–æ–¥–∞–Ω–∞"
            deadline_text = f"\n(–¥–µ–¥–ª–∞–π–Ω: {config.selection.stages['stage1']['deadline']})"
    finally:
        await session.close()
    
    menu_text = f"""üè† –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤ –ú–ë 2025

üìÖ –¢–µ–∫—É—â–∏–π —ç—Ç–∞–ø: {config.selection.stages['stage1']['name']}
üìù –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {status_text}{deadline_text}

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏–¥—É—Ç: {config.selection.stages['stage1']['results_date']}

–¢–ï–ö–°–¢ –¢–ï–ö–°–¢

üìã –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: {config.selection.stages['stage2']['name']}
üöÄ –ù–∞—á–∞–ª–æ: {config.selection.stages['stage2']['start_date']}"""

    return {
        "menu_text": menu_text
    }


async def get_support_data(dialog_manager: DialogManager, **kwargs):
    """–ì–µ—Ç—Ç–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    config: Config = dialog_manager.middleware_data.get("config")
    
    support_text = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n\n"
    for key, contact in config.selection.support_contacts.items():
        if key == "main":
            support_text += f"üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {contact}\n"
        elif key == "technical":
            support_text += f"üîπ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: {contact}\n"
        else:
            support_text += f"üîπ {key.title()}: {contact}\n"
    
    return {
        "support_text": support_text
    }


menu_dialog = Dialog(
    Window(
        Format("{menu_text}"),
        Start(
            Const("üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
            id="fill_application",
            state=ApplicationSG.full_name
        ),
        SwitchTo(
            Const("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
            id="support",
            state=MenuSG.support
        ),
        state=MenuSG.main,
        getter=get_menu_data,
    ),
    Window(
        Format("{support_text}"),
        SwitchTo(
            Const("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"),
            id="back_to_menu",
            state=MenuSG.main
        ),
        state=MenuSG.support,
        getter=get_support_data,
    ),
)
