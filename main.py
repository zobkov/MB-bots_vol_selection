import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage, DefaultKeyBuilder
from aiogram_dialog import setup_dialogs
from redis.asyncio import Redis

from config.config import load_config
from database.db import Database
from database.repositories import UserRepository
from bot.handlers import router
from bot.dialogs import start_dialog, menu_dialog, application_dialog, department_selection_dialog
from bot.middlewares import LoggingMiddleware
from bot.keyboards.command_menu import set_main_menu
from utils.logging_config import setup_logging, log_error, log_user_action
from utils.google_services import setup_google_sheets_service


async def main():
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = load_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—Ä–æ–≤–Ω–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger = setup_logging(config.log_level)
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º Redis —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è FSM
        if config.redis.password:
            redis_client = Redis.from_url(f"redis://:{config.redis.password}@{config.redis.host}:{config.redis.port}/0")
        else:
            redis_client = Redis.from_url(f"redis://{config.redis.host}:{config.redis.port}/0")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
        await redis_client.ping()
        logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {config.redis.host}:{config.redis.port}")
        
        storage = RedisStorage(
            redis=redis_client,
            key_builder=DefaultKeyBuilder(with_bot_id=True, with_destiny=True),
            state_ttl=86400*2,  # –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –¥–µ–Ω—å)
            data_ttl=86400*2   # –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –¥–∞–Ω–Ω—ã—Ö
        )

        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        bot = Bot(
            token=config.tg_bot.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        dp = Dispatcher(storage=storage)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info.username} ({bot_info.first_name})")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Database(config)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        await set_main_menu(bot)

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await db.create_tables()
        logger.info("üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Google Sheets —Å–µ—Ä–≤–∏—Å
        google_sheets_service = setup_google_sheets_service(config)
        if google_sheets_service:
            logger.info("üìä Google Sheets —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Google Sheets —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ë–î –∏ Google Sheets
        async def config_middleware(handler, event, data):
            data["config"] = config
            data["db"] = db
            data["google_sheets_service"] = google_sheets_service
            return await handler(event, data)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        dp.message.middleware(LoggingMiddleware())
        dp.callback_query.middleware(LoggingMiddleware())
        dp.message.middleware(config_middleware)
        dp.callback_query.middleware(config_middleware)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏ –¥–∏–∞–ª–æ–≥–∏
        dp.include_router(router)
        dp.include_router(start_dialog)
        dp.include_router(menu_dialog)
        dp.include_router(application_dialog)
        dp.include_router(department_selection_dialog)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–∏
        setup_dialogs(dp)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        from bot.dialogs.dialog_error_handler import dialog_error_handler
        dp.errors.register(dialog_error_handler)
        
        logger.info("üîß –†–æ—É—Ç–µ—Ä—ã –∏ –¥–∏–∞–ª–æ–≥–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await dp.start_polling(bot)
        
    except Exception as e:
        log_error(e, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")
        raise 
    finally:
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await db.close()
            await redis_client.aclose()
            await bot.session.close()
            logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            log_error(e, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞")


if __name__ == '__main__':
    asyncio.run(main())
