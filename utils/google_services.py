import os
import gspread
from google.oauth2.service_account import Credentials
from typing import Optional, Dict, Any
import logging
from datetime import datetime

logger = logging.getLogger(__name__)


class GoogleSheetsService:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self, credentials_path: str, spreadsheet_id: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Google Sheets
        
        Args:
            credentials_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            spreadsheet_id: ID Google –¢–∞–±–ª–∏—Ü—ã
        """
        self.credentials_path = credentials_path
        self.spreadsheet_id = spreadsheet_id
        
        # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞
        self.scopes = [
            'https://www.googleapis.com/auth/spreadsheets',
        ]
        
        self._setup_service()
    
    def _setup_service(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ Google Sheets"""
        try:
            # –°–æ–∑–¥–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            credentials = Credentials.from_service_account_file(
                self.credentials_path, 
                scopes=self.scopes
            )
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º gspread –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
            self.gc = gspread.authorize(credentials)
            logger.info("‚úÖ Google Sheets API –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets: {e}")
            raise
    
    async def add_application_to_sheet(self, application_data: Dict[str, Any]) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É
        
        Args:
            application_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"üìä –ù–∞—á–∏–Ω–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ Google Sheets...")
            logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {application_data.get('telegram_id')} (@{application_data.get('telegram_username')})")
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ ID
            logger.info(f"üìã –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É: {self.spreadsheet_id}")
            spreadsheet = self.gc.open_by_key(self.spreadsheet_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç "Applications" –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            worksheet_name = "Applications"
            try:
                logger.info(f"üîç –ò—â–µ–º –ª–∏—Å—Ç: {worksheet_name}")
                worksheet = spreadsheet.worksheet(worksheet_name)
                logger.info(f"‚úÖ –õ–∏—Å—Ç {worksheet_name} –Ω–∞–π–¥–µ–Ω")
            except gspread.WorksheetNotFound:
                logger.info(f"üìÑ –õ–∏—Å—Ç {worksheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...")
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                worksheet = spreadsheet.add_worksheet(title=worksheet_name, rows=1000, cols=20)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                headers = [
                    'Timestamp', 'User ID', 'Username', 'Full Name', 'First Name', 'Last Name', 'Middle Name',
                    'Course', 'Dormitory', 'Email', 'Phone', 'Personal Qualities', 'Motivation',
                    'Logistics Rating', 'Marketing Rating', 'PR Rating', 'Program Rating', 'Partners Rating',
                    'Created At', 'Updated At'
                ]
                worksheet.append_row(headers)
                logger.info(f"‚úÖ –õ–∏—Å—Ç {worksheet_name} —Å–æ–∑–¥–∞–Ω —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
                all_records = worksheet.get_all_records()
                user_id = str(application_data.get('telegram_id'))
                
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                existing_row = None
                for i, record in enumerate(all_records, start=2):  # start=2 because row 1 is headers
                    if str(record.get('User ID')) == user_id:
                        existing_row = i
                        break
                
                if existing_row:
                    logger.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ —Å—Ç—Ä–æ–∫–µ {existing_row}")
                    update_method = "update"
                else:
                    logger.info(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
                    update_method = "insert"
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏: {e}")
                update_method = "insert"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            logger.info(f"üìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏...")
            row_data = [
                datetime.now().isoformat(),  # Timestamp
                application_data.get('telegram_id', ''),  # User ID
                application_data.get('telegram_username', ''),  # Username
                application_data.get('full_name', ''),  # Full Name
                application_data.get('first_name', ''),  # First Name
                application_data.get('last_name', ''),  # Last Name
                application_data.get('middle_name', ''),  # Middle Name
                application_data.get('course', ''),  # Course
                "–î–∞" if application_data.get('dormitory') else "–ù–µ—Ç",  # Dormitory
                application_data.get('email', ''),  # Email
                application_data.get('phone', ''),  # Phone
                application_data.get('personal_qualities', ''),  # Personal Qualities
                application_data.get('motivation', ''),  # Motivation
                application_data.get('logistics_rating', ''),  # Logistics Rating
                application_data.get('marketing_rating', ''),  # Marketing Rating
                application_data.get('pr_rating', ''),  # PR Rating
                application_data.get('program_rating', ''),  # Program Rating
                application_data.get('partners_rating', ''),  # Partners Rating
                application_data.get('created_at', ''),  # Created At
                application_data.get('updated_at', ''),  # Updated At
            ]
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets...")
            
            if update_method == "update" and existing_row:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                worksheet.update(f'A{existing_row}:T{existing_row}', [row_data])
                logger.info(f"üîÑ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {application_data.get('telegram_id')} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                worksheet.append_row(row_data)
                logger.info(f"‚ûï –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {application_data.get('telegram_id')} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            
            logger.info(f"üéâ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {application_data.get('telegram_id')} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets")
            return True
            
        except Exception as e:
            error_msg = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Google Sheets: {e}")
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ Google Sheets
            if "quotaExceeded" in error_msg:
                logger.error("üìä –û–®–ò–ë–ö–ê: –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã Google Sheets API")
                logger.error("üí° –†–ï–®–ï–ù–ò–ï: –ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
            elif "403" in error_msg:
                if "Forbidden" in error_msg:
                    logger.error("üö´ –û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets (403 Forbidden)")
                    logger.error("üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ Service Account –∫ —Ç–∞–±–ª–∏—Ü–µ")
                else:
                    logger.error("üö´ –û–®–ò–ë–ö–ê 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            elif "401" in error_msg:
                logger.error("üîê –û–®–ò–ë–ö–ê: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets (401)")
                logger.error("üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Service Account")
            elif "404" in error_msg:
                logger.error("üìã –û–®–ò–ë–ö–ê: –¢–∞–±–ª–∏—Ü–∞ Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)")
                logger.error(f"üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã: {self.spreadsheet_id}")
            elif "500" in error_msg:
                logger.error("üîß –û–®–ò–ë–ö–ê: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ Google (500)")
                logger.error("üí° –†–ï–®–ï–ù–ò–ï: –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
            elif "PERMISSION_DENIED" in error_msg:
                logger.error("üîí –û–®–ò–ë–ö–ê: –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ")
                logger.error("üí° –†–ï–®–ï–ù–ò–ï: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ Service Account –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ")
            else:
                logger.error(f"‚ùì –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê Google Sheets: {error_msg}")
                
            return False


def setup_google_sheets_service(config) -> Optional[GoogleSheetsService]:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets —Å–µ—Ä–≤–∏—Å–∞
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        GoogleSheetsService –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        if not config.google:
            logger.warning("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists(config.google.credentials_path):
            logger.warning(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google –Ω–µ –Ω–∞–π–¥–µ–Ω: {config.google.credentials_path}")
            return None
        
        return GoogleSheetsService(
            credentials_path=config.google.credentials_path,
            spreadsheet_id=config.google.spreadsheet_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None
